{
  "import": {
    "prefix": "imp",
    "body": "import ${2:moduleName} from '${1:module}'$0",
    "description": "Imports entire module statement in ES6 syntax"
  },
  "importNoModuleName": {
    "prefix": "imn",
    "body": "import '${1:module}'$0",
    "description": "Imports entire module in ES6 syntax without module name"
  },
  "importDestructing": {
    "prefix": "imd",
    "body": "import { $2 } from '${1:module}'$0",
    "description": "Imports only a portion of the module in ES6 syntax"
  },
  "importEverything": {
    "prefix": "ime",
    "body": "import * as ${2:alias} from '${1:module}'$0",
    "description": "Imports everything as alias from the module in ES6 syntax"
  },
  "importAs": {
    "prefix": "ima",
    "body": "import { ${2:originalName} as ${3:alias} } from '${1:module}'$0",
    "description": "Imports a specific portion of the module by assigning a local alias in ES6 syntax"
  },
  "require": {
    "prefix": "rqr",
    "body": "require('${1:package}')",
    "description": "Require a package"
  },
  "requireToConst": {
    "prefix": "req",
    "body": "const ${1:packageName} = require('${1:package}')$0",
    "description": "Require a package to const"
  },
  "moduleExports": {
    "prefix": "mde",
    "body": "module.exports = {\n\t$0\n}\n",
    "description": "Module exports from Common JS, node syntax at ES6"
  },
  "exportNamedVariable": {
    "prefix": "env",
    "body": "export const ${1:exportVariable} = ${2:localVariable}\n",
    "description": "Export named variable in ES6 syntax"
  },
  "exportNamedFunction": {
    "prefix": "enf",
    "body": "export const ${1:functionName} = (${2:params}) => {\n\t$0\n}\n",
    "description": "Export named function in ES6 syntax"
  },
  "exportDefaultFunction": {
    "prefix": "edf",
    "body": "export default function ${1:${TM_FILENAME_BASE}}(${2:params}) {\n\t$0\n}\n",
    "description": "Export default function in ES6 syntax"
  },
  "exportClass": {
    "prefix": "ecl",
    "body": "export default class ${1:className} {\n\t$0\n}\n",
    "description": "Export default class in ES6 syntax"
  },
  "exportClassExtends": {
    "prefix": "ece",
    "body": "export default class ${1:className} extends ${2:baseclassName} {\n\t$0\n}\n",
    "description": "Export default class which extends a base one in ES6 syntax"
  },
  //
  //
  //
  "class": {
    "prefix": "cla",
    "body": "class ${1:className} {\n\t${0}\n}",
    "description": "Create a basic class in ES6 syntax"
  },
  "classExtends": {
    "prefix": "clae",
    "body": "class ${1:className} extends ${2:baseclassName} {\n\t${0}\n}",
    "description": "Create a basic class with extends in ES6 syntax"
  },
  "constructor": {
    "prefix": "con",
    "body": "constructor(${1:params}) {\n\t${0}\n}",
    "description": "Add default constructor in a class in ES6 syntax"
  },
  "method": {
    "prefix": "met",
    "body": "${1:methodName}(${2:params}) {\n\t${0}\n}",
    "description": "Create a method inside a class in ES6 syntax"
  },
  "propertyGet": {
    "prefix": "pge",
    "body": "get ${1:propertyName}() {\n\treturn this.${0}\n}",
    "description": "Create a getter property inside a class in ES6 syntax"
  },
  "propertyset": {
    "prefix": "pse",
    "body": "set ${1:propertyName}(${2:value}) {\n\t${0}\n}",
    "description": "Create a setter property inside a class in ES6 syntax"
  },
  //
  //
  //
  "forEach": {
    "prefix": "fre",
    "body": "${1:array}.forEach(${2:currentItem} => {\n\t${0}\n})",
    "description": "Creates a forEach statement in ES6 syntax"
  },
  "forOf": {
    "prefix": "fof",
    "body": "for (const ${1:item} of ${2:object}) {\n\t${0}\n}",
    "description": "Iterating over property names of iterable objects"
  },
  "forIn": {
    "prefix": "fin",
    "body": "for (const ${1:item} in ${2:object}) {\n\t${0}\n}",
    "description": "Iterating over property values of iterable objects"
  },
  "anonymousFunction": {
    "prefix": "anfn",
    "body": "(${1:params}) => {\n\t${2}\n}",
    "description": "Creates an anonymous function in ES6 syntax"
  },
  "namedFunction": {
    "prefix": "nfn",
    "body": "const ${1:name} = (${2:params}) => {\n\t${3}\n}",
    "description": "Creates a named function in ES6 syntax"
  },
  "destructingObject": {
    "prefix": "dob",
    "body": "const {${2:propertyName}} = ${1:objectToDestruct}",
    "description": "Creates and assigns a local variable using object destructing"
  },
  "destructingArray": {
    "prefix": "dar",
    "body": "const [${2:propertyName}] = ${1:arrayToDestruct}",
    "description": "Creates and assigns a local variable using array destructing"
  },
  "setInterval": {
    "prefix": "sti",
    "body": "setInterval(() => {\n\t${2}\n}, ${0:intervalInms})",
    "description": "Executes the given function at specified intervals in ES6 syntax"
  },
  "setTimeOut": {
    "prefix": "sto",
    "body": "setTimeout(() => {\n\t${2}\n}, ${1:delayInms})",
    "description": "Executes the given function after the specified delay in ES6 syntax"
  },
  "promise": {
    "prefix": "prom",
    "body": "return new Promise((resolve, reject) => {\n\t${1}\n})",
    "description": "Creates and returns a new Promise in the standard ES6 syntax"
  },
  "thenCatch": {
    "prefix": "thenc",
    "body": ".then((${1:result}) => {\n\t${2}\n}).catch((${3:err}) => {\n\t${4}\n})",
    "description": "Add the .then and .catch methods to handle promises"
  },
  //
  //
  //
  "consoleAssert": {
    "prefix": "cas",
    "body": "console.assert(${1:assertion}, ${2:obj1})",
    "description": "Log a message and stack trace to console if the first argument is false."
  },
  "consoleClear": {
    "prefix": "ccl",
    "body": "console.clear()",
    "description": "Clears the console."
  },
  "consoleDebug": {
    "prefix": "cde",
    "body": "console.debug(${1:obj1})",
    "description": "Outputs a message to the console with the log level debug."
  },
  "consoleError": {
    "prefix": "cer",
    "body": "console.error(${1:obj1})",
    "description": "Outputs an error message."
  },
  "consoleGroup": {
    "prefix": "cgr",
    "body": "console.group()",
    "description": "Creates a new inline group, indenting all following output by another level. To move back out a level, call groupEnd()."
  },
  "consoleGroupEnd": {
    "prefix": "cge",
    "body": "console.groupEnd()",
    "description": "Exits the current inline group."
  },
  "consoleInfo": {
    "prefix": "cin",
    "body": "console.info(${1:obj1})",
    "description": "Informative logging of information."
  },
  "consoleLog": {
    "prefix": "clg",
    "body": "console.log(${1:obj1})",
    "description": "For general output of logging information."
  },
  "consoleWarn": {
    "prefix": "cwa",
    "body": "console.warn(${1:obj1})",
    "description": "Outputs a warning message."
  },
  //
  //
  //
  "reactClassComponent": {
    "prefix": "rcc",
    "body": "import React, { Component } from 'react'\n\nclass ${1} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ${1}",
    "description": "Creates a React component class with ES6 module system"
  },
  "reactClassComponentPropTypes": {
    "prefix": "rccp",
    "body": "import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass ${1} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n${1}.propTypes = {\n\n}\n\nexport default ${1}",
    "description": "Creates a React component class with ES6 module system and PropTypes"
  },
  "reactFunctionComponent": {
    "prefix": "rfc",
    "body": "import React from 'react'\n\nconst ${1} = props => (\n\t<div>$0</div>\n)\n\nexport default ${1}",
    "description": "Creates a React functional component with ES6 module system"
  },
  "reactFunctionComponentPropTypes": {
    "prefix": "rfcp",
    "body": "import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst ${1} = props => (\n\t<div>$0</div>\n)\n\n${1}.propTypes = {\n\t$0\n}\n\nexport default ${1}",
    "description": "Creates a React functional component with ES6 module system and PropTypes"
  },
  "reactClassConstructor": {
    "prefix": "con",
    "body": "constructor(props) {\n\tsuper(props)\n\t$0\n}\n",
    "description": "Adds a default constructor for the class that contains props as arguments"
  },
  "emptyState": {
    "prefix": "est",
    "body": "this.state = {\n\t$1\n}",
    "description": "Creates empty state object. To be used in a constructor."
  },
  //
  //
  //
  "componentWillMount": {
    "prefix": "cwm",
    "body": "componentWillMount() {\n\t$0\n}\n",
    "description": "Invoked once, both on the client and server, immediately before the initial rendering occurs."
  },
  "UNSAFE_componentWillMount": {
    "prefix": "ucwm",
    "body": "UNSAFE_componentWillMount() {\n\t$0\n}\n"
  },
  "componentDidMount": {
    "prefix": "cdm",
    "body": "componentDidMount() {\n\t$0\n}\n",
    "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
  },
  "componentWillReceiveProps": {
    "prefix": "cwr",
    "body": "componentWillReceiveProps(nextProps) {\n\t$0\n}\n",
    "description": "Invoked when a component is receiving new props. This method is not called for the initial render. [DEPRECATION NOTE]: This method is deprecated in React 16.3"
  },
  "UNSAFE_componentWillReceiveProps": {
    "prefix": "ucwr",
    "body": "UNSAFE_componentWillReceiveProps(nextProps) {\n\t$0\n}\n"
  },
  "shouldComponentUpdate": {
    "prefix": "scu",
    "body": "shouldComponentUpdate(nextProps, nextState) {\n\t$0\n}\n",
    "description": "Invoked before rendering when new props or state are being received."
  },
  "componentWillUpdate": {
    "prefix": "cwup",
    "body": "componentWillUpdate(nextProps, nextState) {\n\t$0\n}\n",
    "description": "Invoked immediately before rendering when new props or state are being received. [DEPRECATION NOTE]: This method is deprecated in React 16.3"
  },
  "UNSAFE_componentWillUpdate": {
    "prefix": "ucwup",
    "body": "UNSAFE_componentWillUpdate(nextProps, nextState) {\n\t$0\n}\n"
  },
  "componentDidUpdate": {
    "prefix": "cdup",
    "body": "componentDidUpdate(prevProps, prevState) {\n\t$0\n}\n",
    "description": "Invoked immediately after the component's updates are flushed to the DOM."
  },
  "componentWillUnmount": {
    "prefix": "cwun",
    "body": "componentWillUnmount() {\n\t$0\n}\n",
    "description": "Invoked immediately before a component is unmounted from the DOM."
  },
  "getSnapshotBeforeUpdate": {
    "prefix": "gsbu",
    "body": "getSnapshotBeforeUpdate(prevProps, prevState) {\n\t$0\n}\n",
    "description": "Invoked right before the most recently rendered output is committed to e.g. the DOM."
  },
  "getDerivedStateFromProps": {
    "prefix": "gdsfp",
    "body": "static getDerivedStateFromProps(props, state) {\n\t$0\n}\n",
    "description": "Invoked right before calling the render method, both on the initial mount and on subsequent updates. It should return an object to update the state, or null to update nothing."
  },
  //
  //
  //
  "useState": {
    "prefix": "ust",
    "body": "const [${1:state}, ${2:setState}] = useState(${3:initialState})",
    "description": "Hook useState. Returns a stateful value, and a function to update it."
  },
  "useEffect": {
    "prefix": "uef",
    "body": "useEffect(${1:didUpdate})",
    "description": "Hook userEffect. Accepts a function that contains imperative, possibly effectful code."
  },
  "useContext": {
    "prefix": "uco",
    "body": "const ${1:value} = useContext(${2:MyContext})",
    "description": "Hook useContext. Accepts a context object (the value returned from React.createContext) and returns the current context value for that context."
  },
  "useReducer": {
    "prefix": "ure",
    "body": "const [${1:state}, ${2:dispatch}] = useReducer(${3:reducer}, ${4:initialArg}, ${5:init})",
    "description": "Hook useReducer. An alternative to useState. Accepts a reducer of type (state, action) => newState, and returns the current state paired with a dispatch method. (If you’re familiar with Redux, you already know how this works.)"
  },
  "useCallback": {
    "prefix": "uca",
    "body": "const ${1:memoizedCallback} = useCallback(() => { ${3:doSomething} }, [${2:deps}])",
    "description": "Hook useCallback. Returns a memoized callback."
  },
  "useMemo": {
    "prefix": "ume",
    "body": "const ${1:memoizedValue} = useMemo(() => ${3:computeExpensiveValue}, [${2:deps}])",
    "description": "Hook useMemo. Returns a memoized value."
  },
  "useRef": {
    "prefix": "uref",
    "body": "const ${1:refContainer} = useRef(${2:initialValue})",
    "description": "Hook useRef. Returns a mutable ref object whose .current property is initialized to the passed argument (initialValue). The returned object will persist for the full lifetime of the component."
  },
  //
  //
  //
  "componentSetStateObject": {
    "prefix": "sst",
    "body": "this.setState($0)",
    "description": "Performs a shallow merge of nextState into current state"
  },
  "componentSetStateFunc": {
    "prefix": "ssf",
    "body": "this.setState((state, props) => { return { $0 }})\n",
    "description": "Performs a shallow merge of nextState into current state"
  },
  //
  //
  //
  "propTypes": {
    "prefix": "rpt",
    "body": "${1:$TM_FILENAME_BASE}.propTypes = {\n\t$2\n}",
    "description": "Creates empty propTypes declaration"
  },
  "defaultProps": {
    "prefix": "rdp",
    "body": "${1:$TM_FILENAME_BASE}.defaultProps = {\n\t$2\n}",
    "description": "Creates empty defaultProps declaration"
  },
  //
  //
  //
  "propTypeArray": {
    "prefix": "pta",
    "body": "PropTypes.array,",
    "description": "Array prop type"
  },
  "propTypeArrayRequired": {
    "prefix": "ptar",
    "body": "PropTypes.array.isRequired,",
    "description": "Array prop type required"
  },
  "propTypeBool": {
    "prefix": "ptb",
    "body": "PropTypes.bool,",
    "description": "Bool prop type"
  },
  "propTypeBoolRequired": {
    "prefix": "ptbr",
    "body": "PropTypes.bool.isRequired,",
    "description": "Bool prop type required"
  },
  "propTypeFunc": {
    "prefix": "ptf",
    "body": "PropTypes.func,",
    "description": "Func prop type"
  },
  "propTypeFuncRequired": {
    "prefix": "ptfr",
    "body": "PropTypes.func.isRequired,",
    "description": "Func prop type required"
  },
  "propTypeNumber": {
    "prefix": "ptn",
    "body": "PropTypes.number,",
    "description": "Number prop type"
  },
  "propTypeNumberRequired": {
    "prefix": "ptnr",
    "body": "PropTypes.number.isRequired,",
    "description": "Number prop type required"
  },
  "propTypeObject": {
    "prefix": "pto",
    "body": "PropTypes.object,",
    "description": "Object prop type"
  },
  "propTypeObjectRequired": {
    "prefix": "ptor",
    "body": "PropTypes.object.isRequired,",
    "description": "Object prop type required"
  },
  "propTypeString": {
    "prefix": "pts",
    "body": "PropTypes.string,",
    "description": "String prop type"
  },
  "propTypeStringRequired": {
    "prefix": "ptsr",
    "body": "PropTypes.string.isRequired,",
    "description": "String prop type required"
  },
  "propTypeSymbol": {
    "prefix": "ptsm",
    "body": "PropTypes.symbol,",
    "description": "Symbol prop type"
  },
  "propTypeSymbolRequired": {
    "prefix": "ptsmr",
    "body": "PropTypes.symbol.isRequired,",
    "description": "Symbol prop type required"
  },
  "propTypeAny": {
    "prefix": "ptan",
    "body": "PropTypes.any,",
    "description": "Any prop type"
  },
  "propTypeAnyRequired": {
    "prefix": "ptanr",
    "body": "PropTypes.any.isRequired,",
    "description": "Any prop type required"
  },
  "propTypeNode": {
    "prefix": "ptnd",
    "body": "PropTypes.node,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array"
  },
  "propTypeNodeRequired": {
    "prefix": "ptndr",
    "body": "PropTypes.node.isRequired,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array required"
  },
  "propTypeElement": {
    "prefix": "ptel",
    "body": "PropTypes.element,",
    "description": "React element prop type"
  },
  "propTypeElementRequired": {
    "prefix": "ptelr",
    "body": "PropTypes.element.isRequired,",
    "description": "React element prop type required"
  },
  "propTypeInstanceOf": {
    "prefix": "pti",
    "body": "PropTypes.instanceOf($0),",
    "description": "Is an instance of a class prop type"
  },
  "propTypeInstanceOfRequired": {
    "prefix": "ptir",
    "body": "PropTypes.instanceOf($0).isRequired,",
    "description": "Is an instance of a class prop type required"
  },
  "propTypeEnum": {
    "prefix": "pte",
    "body": "PropTypes.oneOf(['$0']),",
    "description": "Prop type limited to specific values by treating it as an enum"
  },
  "propTypeEnumRequired": {
    "prefix": "pter",
    "body": "PropTypes.oneOf(['$0']).isRequired,",
    "description": "Prop type limited to specific values by treating it as an enum required"
  },
  "propTypeOneOfType": {
    "prefix": "ptet",
    "body": "PropTypes.oneOfType([\n\t$0\n]),",
    "description": "An object that could be one of many types"
  },
  "propTypeOneOfTypeRequired": {
    "prefix": "ptetr",
    "body": "PropTypes.oneOfType([\n\t$0\n]).isRequired,",
    "description": "An object that could be one of many types required"
  },
  "propTypeArrayOf": {
    "prefix": "ptao",
    "body": "PropTypes.arrayOf($0),",
    "description": "An array of a certain type"
  },
  "propTypeArrayOfRequired": {
    "prefix": "ptaor",
    "body": "PropTypes.arrayOf($0).isRequired,",
    "description": "An array of a certain type required"
  },
  "propTypeObjectOf": {
    "prefix": "ptoo",
    "body": "PropTypes.objectOf($0),",
    "description": "An object with property values of a certain type"
  },
  "propTypeObjectOfRequired": {
    "prefix": "ptoor",
    "body": "PropTypes.objectOf($0).isRequired,",
    "description": "An object with property values of a certain type required"
  },
  "propTypeObjectOfShape": {
    "prefix": "ptoos",
    "body": "PropTypes.objectOf(PropTypes.shape($0)),",
    "description": "An object whose keys are known ahead of time"
  },
  "propTypeObjectOfShapeRequired": {
    "prefix": "ptoosr",
    "body": "PropTypes.objectOf(PropTypes.shape($0)).isRequired,",
    "description": "An object whose keys are known ahead of time required"
  },
  "propTypeShape": {
    "prefix": "ptsh",
    "body": "PropTypes.shape({\n\t$0\n}),",
    "description": "An object taking on a particular shape"
  },
  "propTypeShapeRequired": {
    "prefix": "ptshr",
    "body": "PropTypes.shape({\n\t$0\n}).isRequired,",
    "description": "An object taking on a particular shape required"
  }
}
